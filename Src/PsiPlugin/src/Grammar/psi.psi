options { 
  parserPackage="JetBrains.ReSharper.PsiPlugin.Parsing";
  parserClassName="PsiParserGenerated";
  psiInterfacePackageName="JetBrains.ReSharper.PsiPlugin.Tree";
  psiStubsPackageName="JetBrains.ReSharper.PsiPlugin.Tree.Impl";
  psiStubsBaseClass="PsiCompositeElement";
  tokenClassName="JetBrains.ReSharper.PsiPlugin.Tree.Impl.PsiToken";
  tokenTypePrefix="";
  parserTargetSubdir="Parsing/Psi";
  psiInterfacesTargetSubdir="Psi/Psi/Tree";
  psiStubsTargetSubdir="Psi/Psi/Tree/Impl";
  elementTypePrefix="";
//  semanticVisitorClassName="ElementVisitor";
//  hierarchicalSemanticVisitorClassName="HierarchicalElementVisitor";
  visitorClassName="TreeNodeVisitor";
  visitorMethodSuffix="";
  testTargetSubdir="Psi/Test/Psi";
  disableReflection;
  separateHierarchies;
  visitorSuperClassName="JetBrains.ReSharper.PsiPlugin.Tree.TreeNodeVisitorBase";
  "treeElementClassFQName"="JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement";
  "leafElementClassFQName"="JetBrains.ReSharper.PsiPlugin.Tree.PsiLeafElement";
  "compositeElementClassFQName"="JetBrains.ReSharper.PsiPlugin.Tree.PsiCompositeElement";
  "psiElementVisitorClassFQName"="JetBrains.ReSharper.PsiPlugin.Tree.TreeNodeVisitor";
  "tokenTypeClassFQName"="JetBrains.ReSharper.PsiPlugin.Parsing.PsiTokenType";
  "unexpectedTokenClassFQName"="Parsing.UnexpectedToken";
  "syntaxErrorClassFQName"="Parsing.SyntaxError";
  "parserGenRuntimePackageName"="Parsing";
  "createTokenElementMethodFQName"="JetBrains.ReSharper.PsiPlugin.Factory.createTokenElement";
  "visitMethodPrefix"="Visit";
  "lexerClassName"="JetBrains.ReSharper.Psi.Parsing.ILexer";
  "psiClassesPrefix"="";
  "psiElementClassFQName"="JetBrains.ReSharper.PsiPlugin.Tree.IPsiTreeNode";
//  "semanticPsiElementClassFQName"="JetBrains.ReSharper.PsiPlugin.Tree.IPsiElement";
  customImplPackage="JetBrains.ReSharper.PsiPlugin.Tree.Impl";
  customInterfacePackage="JetBrains.ReSharper.PsiPlugin.Tree";
  "interfaceNamePrefix"="I"; 
//  "sourceInterfaceNamePrefix"="Source";
//  "sourceInterfaceNameSuffix"="Node";
  "tokenElementClassFQName"="JetBrains.ReSharper.Psi.Tree.ITokenNode";   
  "customImplSuffix"="";
  "objectClassFQName"="System.Object";
  tokenBitsetThreshold=4;
  languageType="JetBrains.ReSharper.PsiPlugin.Grammar.PsiLanguage.Instance";
  parserMessagesClass="JetBrains.ReSharper.PsiPlugin.Parsing.ParserMessages";
  generateWorkingPsi;
}

//abstract errorElement options { 
  //interfaceName = "JetBrains.ReSharper.Psi.Tree.IErrorElement"; 
  //elementType="ERROR_ELEMENT";
  //}
  //:
    //IDENTIFIER?
    //| BAD_CHARACTER
  //;

errorhandling psiFile options {
	stubBase="PsiFileElement";
}
extras{
	get {methodName = "Interfaces" path = <psiFile:PSI_INTERFACES> };
	get {methodName = "Paths" path = <psiFile:PSI_PATHS> };
}
	  :
	  optionsDefinition?
	  pathsDeclaration<PSI_PATHS>?
	  ruleDeclaration*
	  interfacesDefinition<PSI_INTERFACES>?
  ;

interfacesDefinition
	:
	INTERFACES
	LBRACE
	ruleDeclaration*
	RBRACE
  ;

errorhandling ruleDeclaration
extras{
	get {methodName = "RuleName" path = <ruleDeclaration:PSI_RULE_NAME> };
	get {methodName = "Extras" path = <ruleDeclaration:PSI_EXTRAS> };
	get {methodName = "Parameters" path = <ruleDeclaration:PSI_PARAMETERS> };
	get {methodName = "Body" path = <ruleDeclaration:PSI_BODY> };
}
	: 
	modifier*
	ruleName<PSI_RULE_NAME>
	roleGetterParameter?
	ruleBracketTypedParameters<PSI_PARAMETERS>?
	optionsDefinition?
	extrasDefinition<PSI_EXTRAS>?
	COLON
	ruleBody<PSI_BODY>
	SEMICOLON
  ;

ruleBody
	:
	psiExpression*
  ;

modifier
	:
	ERRORHANDLING
	| INTERFACE
	| PRIVATE
	| ABSTRACT
  ;

ruleName
	:
	IDENTIFIER
  ;


roleGetterParameter
	:
	LBRACE
	(ROLE_KEYWORD
	COMMA)?
	GETTER
	RBRACE
  ;

errorhandling optionsDefinition
	:
	OPTIONS
	LBRACE
	optionDefinition*
	RBRACE
  ;

errorhandling optionDefinition
extras{
	get {methodName = "OptionName" path = <optionDefinition:PSI_OPTION_NAME> };
	get {methodName = "OptionIdentifierValue" path = <optionDefinition:PSI_OPTION_IDENTIFIER_VALUE> };
	get {methodName = "OptionStringValue" path = <optionDefinition:PSI_OPTION_STRING_VALUE> };
	get {methodName = "OptionIntegerValue" path = <optionDefinition:PSI_OPTION_INTEGER_VALUE> };
}
	:
	optionName<PSI_OPTION_NAME>
	(optionEqDefinition|
	optionColonDefinition)?
	SEMICOLON
  ;

private optionEqDefinition
	:
	EQ
	(IDENTIFIER<PSI_OPTION_IDENTIFIER_VALUE> | optionStringValue<PSI_OPTION_STRING_VALUE> | INTEGER_LITERAL<PSI_OPTION_INTEGER_VALUE>)
  ;

optionStringValue
	:
	STRING_LITERAL
  ;

private optionColonDefinition
	:
	COLON 
	(PLUS ruleName
	| 
	LPARENTH
	STRING_LITERAL ruleName
	(SEMICOLON STRING_LITERAL ruleName)*
	RPARENTH)
  ;


optionName
	:
	IDENTIFIER
	| STRING_LITERAL
  ;

errorhandling extrasDefinition
	:
	EXTRAS
	LBRACE
	extraDefinition*
	RBRACE
  ;

extraDefinition
extras{
	get {methodName = "PathValue" path = <extraDefinition:PSI_PATH_VALUE> };
}
	:
	GET
	LBRACE
	IDENTIFIER
	EQ
	STRING_LITERAL
	IDENTIFIER
	EQ
	pathValue<PSI_PATH_VALUE>
	(RETURN_TYPE
	EQ
	STRING_LITERAL)?
	ISCACHED?
	RBRACE
	SEMICOLON
  ;

psiExpression
	:
	sequence choiceTail*
  ;

notChoiceExpression
	:
	predicated
	| simpleExpression quantifier?
  ;

choiceTail
extras{
	get {methodName = "Sequence" path = <choiceTail:PSI_SEQUENCE> };
}
	:
	OR
	sequence<PSI_SEQUENCE>
  ;

quantifier
	:
	ASTERISK
	| QUEST
	| PLUS
  ;

predicated
	:
	EXCL simpleExpression quantifier?
	| AND variableName ruleParameters? quantifier?
  ;

//predicator
//	:
//	AND
//	| EXCL
//  ;

simpleExpression
	:
	(parenExpression
	| listExpression
	//| braceExpression
	//| bracketExpression
	| ruleName (BACK_QUOTE afterQuote)? ruleParameters ?) 
  ;

errorhandling listExpression
	:
	LIST_KEYWORD
	(parenExpression | ruleName (BACK_QUOTE afterQuote)? ruleParameters ?)
	SEP_KEYWORD
	(parenExpression | ruleName (BACK_QUOTE afterQuote)? ruleParameters ?)
  ;

errorhandling ruleParameters
	:
	ruleAngleParameters ruleBracketParameters?
	| ruleBraceParameters ruleBracketParameters?
	| ruleBracketParameters
  ;

ruleBracketTypedParameters
	:
	LBRACKET
	ruleName
	variableDeclaration
	(COMMA ruleName variableDeclaration)*
	RBRACKET
  ;

private ruleBracketParameters
	:
	LBRACKET
	(NULL_KEYWORD | variableName)
	(COMMA (NULL_KEYWORD | variableName))*
	RBRACKET
  ;

private ruleAngleParameters
	:
	LT
	(AT
	ROLE_KEYWORD
	COMMA
	AT
	GETTER
	|
	roleName (EQ STRING_LITERAL)?
	(COMMA ((IDENTIFIER | CACHED)(EQ STRING_LITERAL)?| ISCACHED))*)
	GT
  ;

private ruleBraceParameters
	:
	LBRACE
	(AT
	ROLE_KEYWORD
	COMMA
	AT
	GETTER
	|
	roleName (EQ STRING_LITERAL)?
	(COMMA ((IDENTIFIER | CACHED)(EQ STRING_LITERAL)?| ISCACHED))*)
	RBRACE
  ;



sequence
	:
	notChoiceExpression*
  ;

parenExpression
	:
	LPARENTH
	(psiExpression
	| sharpExpression)
	RPARENTH
  ;

sharpExpression
	:
	SHARP
	variableDeclaration
	COLON
	ruleName (BACK_QUOTE afterQuote)? ruleParameters ?
  ;

variableDeclaration
	:
	variableName
  ;

variableName
	:
	IDENTIFIER
  ;

afterQuote
	:
	IDENTIFIER
  ;

//braceExpression
//	:
//	LBRACE
//	psiExpression
//	RBRACE
//  ;

//bracketExpression
//	:
//	LBRACKET
//	psiExpression
//	RBRACKET
//  ;

errorhandling pathsDeclaration
	:
	PATHS
	LBRACE
	pathDeclaration*
	RBRACE
  ;

errorhandling pathDeclaration
extras{
	get {methodName = "PathName" path = <pathDeclaration:PSI_PATH_NAME> };
}
	:
	pathName<PSI_PATH_NAME>
	EQ
	pathValue
	SEMICOLON
  ;

pathName
	:
	IDENTIFIER
  ;

pathValue
	:
	LT
	pathElement
	(DIV
	pathElement)*
	GT 
  ;

pathElement
extras{
	get {methodName = "RoleName" path = <pathElement:PSI_ROLE_NAME> };
}
	:
	pathName
	(COLON
	roleName<PSI_ROLE_NAME>)?
  ;

roleName
	:
	IDENTIFIER
  ;